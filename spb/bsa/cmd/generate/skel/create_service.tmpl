package service

import (
	"errors"

	"spb/bsa/internal/{{.PathName}}/model"
	"spb/bsa/internal/{{.PathName}}/utility"
	tb "spb/bsa/pkg/entities"
	"spb/bsa/pkg/utils"
)

var ErrEmailExists = errors.New("email already exists")

// @author: LoanTT
// @function: Create
// @description: Service for {{.ModuleName}} creation
// @param: {{.ModuleName}} model.Create{{.StructName}}Request
// @return: {{.ModuleName}} entities.{{.StructName}}, error
func (s *Service) Create(reqBody *model.Create{{.StructName}}Request) (*tb.{{.StructName}}, error) {
	var count int64

	err := s.db.Model(&tb.{{.StructName}}{}).Scopes(utility.EmailIsVerity).Where("email = ?", reqBody.Email).Count(&count).Error
	if count > 0 || err != nil {
		return nil, ErrEmailExists
	}

	var role *tb.Role
	if err := s.db.
		Preload("Permissions").
		Where("id = ?", reqBody.Role).
		First(role).Error; err != nil {
		return nil, err
	}

	{{.ModuleName}} := mapCreateRequestToEntity(reqBody, role)
	if err := s.db.Create(&{{.ModuleName}}).Error; err != nil {
		return nil, err
	}

	return {{.ModuleName}}, nil
}

// @author: LoanTT
// @function: mapCreateRequestToEntity
// @description: Mapping create {{.ModuleName}} request to {{.ModuleName}} entity
// @param: reqBody model.Create{{.StructName}}Request
// @param: role tb.Role
// @return: *tb.{{.StructName}}
func mapCreateRequestToEntity(reqBody *model.Create{{.StructName}}Request, role *tb.Role) *tb.{{.StructName}} {
	return &tb.{{.StructName}}{
		Email:           reqBody.Email,
		Password:        utils.BcryptHash(reqBody.Password),
		Role:            *role,
		RoleID:          role.ID,
		IsEmailVerified: false,
	}
}
