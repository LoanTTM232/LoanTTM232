package handler

import (
	"spb/bsa/internal/{{.PathName}}/model"
	"spb/bsa/internal/{{.PathName}}/utility"
	"spb/bsa/pkg/global"
	"spb/bsa/pkg/logger"
	"spb/bsa/pkg/utils"

	"github.com/gofiber/fiber/v3"
)

var ErrUpdate{{.StructName}}Failed = fiber.NewError(fiber.StatusBadRequest, "update {{.ModuleName}} failed")

// {{.StructName}}GetAll godoc
//
// @Summary 		Update {{.ModuleName}} by id
// @Description 	Update {{.ModuleName}} by id
// @Tags 			{{.RouteName}}
// @Accept  		json
// @Produce 		json
// @Param 			{{.ModuleName}} body model.Update{{.StructName}}Request true "{{.StructName}} data"
// @Success 		200 {object} utils.JSONResult{data=model.{{.StructName}}Response}		"Update {{.ModuleName}} by id success"
// @Failure 		400 {object} utils.ErrorResult{message=string}      "Update {{.ModuleName}} by id failed"
// @Router 			/api/v1/{{.RouteName}}/{id} [patch]
func (s *Handler) Update(ctx fiber.Ctx) error {
	var err error
	var {{.ModuleName}}Id string
	reqBody := new(model.Update{{.StructName}}Request)

	fctx := utils.FiberCtx{Fctx: ctx}
	if err = fctx.ParseJsonToStruct(reqBody, global.SPB_VALIDATOR); err != nil {
		logger.Errorf("error parse json to struct: %v", err)
		return fctx.ErrResponse(ErrUpdate{{.StructName}}Failed)
	}
	if {{.ModuleName}}Id, err = fctx.ParseUUID("id"); err != nil {
		logger.Errorf("error parse {{.ModuleName}} id: %v", err)
		return fctx.ErrResponse(ErrUpdate{{.StructName}}Failed)
	}

	{{.ModuleName}}Updated, err := s.service.Update(reqBody, {{.ModuleName}}Id)
	if err != nil {
		logger.Errorf("error create {{.ModuleName}}: %v", err)
		return fctx.ErrResponse(ErrUpdate{{.StructName}}Failed)
	}
	{{.ModuleName}}Response := utility.Map{{.StructName}}EntityToResponse({{.ModuleName}}Updated)

	return fctx.JsonResponse(fiber.StatusOK, {{.ModuleName}}Response)
}
