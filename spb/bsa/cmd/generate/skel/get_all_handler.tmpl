package handler

import (
	"spb/bsa/internal/{{.PathName}}/model"
	"spb/bsa/internal/{{.PathName}}/utility"
	"spb/bsa/pkg/auth"
	tb "spb/bsa/pkg/entities"
	"spb/bsa/pkg/logger"
	"spb/bsa/pkg/utils"

	"github.com/gofiber/fiber/v3"
)

var ErrGet{{.StructNamePlural}}Failed = fiber.NewError(fiber.StatusNotFound, "get {{.ModuleNamePlural}} failed")

// {{.StructName}}GetAll godoc
//
// @Summary 		Get all {{.ModuleNamePlural}}
// @Description 	Get all {{.ModuleNamePlural}}
// @Tags 			{{.RouteName}}
// @Accept  		json
// @Produce 		json
// @Param 			i query int false "Number items on page"
// @Param 			p query int false "Page number"
// @Param			b query string false "Order by"
// @Param			t query string false "Order type"
// @Success 		200 {object} utils.JSONResult{data=model.Get{{.StructNamePlural}}Response}	"Get all {{.ModuleNamePlural}} success"
// @Failure 		404 {object} utils.ErrorResult{message=string}        		"Get all {{.ModuleNamePlural}} failed"
// @Router 			/api/v1/{{.RouteName}} [get]
func (s *Handler) GetAll(ctx fiber.Ctx) error {
	var err error
	reqBody := new(model.Get{{.StructNamePlural}}Request)
	fctx := utils.FiberCtx{Fctx: ctx}

	pagination := utils.GetPagination(ctx.Queries())
	reqBody.Pagination = pagination

	claims, err := auth.GetTokenFromCookie(ctx)
	if err != nil {
		logger.FErrorf("error parse jwt: %v", err)
		return fctx.ErrResponse(ErrGet{{.StructNamePlural}}Failed)
	}

	reqBody.Role = claims["role"].(string)

	{{.ModuleNamePlural}}, err := s.service.GetAll(reqBody)
	if err != nil {
		logger.FErrorf("error get {{.ModuleNamePlural}}: %v", err)
		return fctx.ErrResponse(ErrGet{{.StructNamePlural}}Failed)
	}

	{{.ModuleName}}Response := map{{.StructNamePlural}}EntityToResponse({{.ModuleNamePlural}}, reqBody)
	return fctx.JsonResponse(fiber.StatusOK, {{.ModuleName}}Response)
}

// @author: LoanTT
// @function: map{{.StructNamePlural}}EntityToResponse
// @description: Map {{.ModuleNamePlural}} entity to response
// @param: {{.ModuleNamePlural}} []*tb.{{.StructName}}
// @return: *model.Get{{.StructNamePlural}}Response
func map{{.StructNamePlural}}EntityToResponse({{.ModuleNamePlural}} []*tb.{{.StructName}}, reqBody *model.Get{{.StructNamePlural}}Request) *model.Get{{.StructNamePlural}}Response {
	res := new(model.Get{{.StructNamePlural}}Response)
	for id := range {{.ModuleNamePlural}} {
		res.{{.StructNamePlural}} = append(res.{{.StructNamePlural}}, utility.Map{{.StructName}}EntityToResponse({{.ModuleNamePlural}}[id]))
	}

	res.Total = uint(len(res.{{.StructNamePlural}}))
	res.Pagination = &reqBody.Pagination
	res.Pagination.SetPagination(int(res.Total))
	return res
}
